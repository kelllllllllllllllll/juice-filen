name: Release on Tag

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Dependencies
        run: bun install

      - name: Extract version and Check Prerelease
        id: get_version
        run: |
          # Extract tag name (e.g., v1.2.3 or v1.2.3-beta.1)
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          echo "Tag name: $TAG_NAME"

          # Extract base version (e.g., 1.2.3 or 1.2.3-beta.1)
          VERSION="${TAG_NAME#v}"
          echo "Extracted version: $VERSION"

          # Determine if it's a prerelease by checking for '-' in the version string
          IS_PRERELEASE="false"
          if [[ "$VERSION" == *"-"* ]]; then
            IS_PRERELEASE="true"
          fi
          echo "Is Pre-release: $IS_PRERELEASE"

          # Set outputs for subsequent steps
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "is_prerelease=$IS_PRERELEASE" >> "$GITHUB_OUTPUT"

      - name: Update package.json version
        env:
          NEW_VERSION: ${{ steps.get_version.outputs.version }}
        run: bun run update-package-json.ts

      - name: Build Project
        run: bun run build.ts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          release_name: v${{ steps.get_version.outputs.tag_name }}
          body: |
            ${{ steps.get_version.outputs.tag_name }}

          prerelease: ${{ steps.get_version.outputs.is_prerelease }}
          draft: true 

      - name: Upload each file in dist/ as a release asset
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in ./dist/*; do
            [ -f "$file" ] || continue
            filename=$(basename "$file")
            echo "Uploading $filename"
            gh release upload "${{ steps.get_version.outputs.tag_name }}" "$file" --clobber
          done
